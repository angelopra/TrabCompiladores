Nonterminals useless in grammar

    functions
    function
    parameters
    moreParameters
    parameter


Rules useless in grammar

   55 program: functions main

   56 functions: function functions

   57 function: FN ID LPAR parameters RPAR fBody

   58 parameters: parameter moreParameters
   59           | ε

   60 moreParameters: COM parameter moreParameters
   61               | ε

   62 parameter: ID type


State 8 conflicts: 1 shift/reduce
State 18 conflicts: 1 shift/reduce
State 31 conflicts: 1 shift/reduce
State 54 conflicts: 12 shift/reduce
State 55 conflicts: 12 shift/reduce
State 83 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: main

    2 type: TYPE_INT
    3     | TYPE_FLOAT

    4 fBody: LBRAC statements return RBRAC

    5 statements: statement statements
    6           | ε

    7 statement: VAR declarations
    8          | assignment
    9          | unary
   10          | return
   11          | functionCall SCOL
   12          | if
   13          | while

   14 declarations: declaration declarations
   15             | declaration

   16 declaration: ID COL type EQ expression SCOL

   17 expression: expression op expression
   18           | functionCall
   19           | ID
   20           | literal
   21           | LPAR expression RPAR
   22           | MINUS expression
   23           | EXCL expression

   24 op: PLUS
   25   | MINUS
   26   | ASTR
   27   | SLSH
   28   | PRCT
   29   | GT
   30   | LT
   31   | GEQ
   32   | LEQ
   33   | DIF
   34   | AND
   35   | OR

   36 functionCall: ID LPAR arguments RPAR

   37 arguments: expression moreArgs
   38          | ε

   39 moreArgs: COM expression moreArgs
   40         | ε

   41 literal: INT
   42        | FLOAT

   43 assignment: ID EQ expression SCOL

   44 unary: ID inOrDecrement SCOL
   45      | inOrDecrement ID SCOL

   46 inOrDecrement: INCR
   47              | DECR

   48 return: RETURN expression SCOL

   49 if: IF expression body else

   50 body: LBRAC statements RBRAC

   51 else: ELSE body
   52     | ε

   53 while: WHILE expression body

   54 main: FN MAIN LPAR RPAR fBody


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    FN (258) 54
    ID (259) 16 19 36 43 44 45
    INT (260) 41
    FLOAT (261) 42
    LPAR (262) 21 36 54
    RPAR (263) 21 36 54
    COM (264) 39
    TYPE_INT (265) 2
    TYPE_FLOAT (266) 3
    LBRAC (267) 4 50
    RBRAC (268) 4 50
    VAR (269) 7
    SCOL (270) 11 16 43 44 45 48
    COL (271) 16
    EQ (272) 16 43
    MINUS (273) 22 25
    EXCL (274) 23
    PLUS (275) 24
    ASTR (276) 26
    SLSH (277) 27
    PRCT (278) 28
    GT (279) 29
    LT (280) 30
    GEQ (281) 31
    LEQ (282) 32
    DIF (283) 33
    AND (284) 34
    OR (285) 35
    INCR (286) 46
    DECR (287) 47
    RETURN (288) 48
    IF (289) 49
    ELSE (290) 51
    WHILE (291) 53
    MAIN (292) 54


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    type (40)
        on left: 2 3
        on right: 16
    fBody (41)
        on left: 4
        on right: 54
    statements (42)
        on left: 5 6
        on right: 4 5 50
    statement (43)
        on left: 7 8 9 10 11 12 13
        on right: 5
    declarations (44)
        on left: 14 15
        on right: 7 14
    declaration (45)
        on left: 16
        on right: 14 15
    expression (46)
        on left: 17 18 19 20 21 22 23
        on right: 16 17 21 22 23 37 39 43 48 49 53
    op (47)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35
        on right: 17
    functionCall (48)
        on left: 36
        on right: 11 18
    arguments (49)
        on left: 37 38
        on right: 36
    moreArgs (50)
        on left: 39 40
        on right: 37 39
    literal (51)
        on left: 41 42
        on right: 20
    assignment (52)
        on left: 43
        on right: 8
    unary (53)
        on left: 44 45
        on right: 9
    inOrDecrement (54)
        on left: 46 47
        on right: 44 45
    return (55)
        on left: 48
        on right: 4 10
    if (56)
        on left: 49
        on right: 12
    body (57)
        on left: 50
        on right: 49 51 53
    else (58)
        on left: 51 52
        on right: 49
    while (59)
        on left: 53
        on right: 13
    main (60)
        on left: 54
        on right: 1


State 0

    0 $accept: • program $end

    FN  shift, and go to state 1

    program  go to state 2
    main     go to state 3


State 1

   54 main: FN • MAIN LPAR RPAR fBody

    MAIN  shift, and go to state 4


State 2

    0 $accept: program • $end

    $end  shift, and go to state 5


State 3

    1 program: main •

    $default  reduce using rule 1 (program)


State 4

   54 main: FN MAIN • LPAR RPAR fBody

    LPAR  shift, and go to state 6


State 5

    0 $accept: program $end •

    $default  accept


State 6

   54 main: FN MAIN LPAR • RPAR fBody

    RPAR  shift, and go to state 7


State 7

   54 main: FN MAIN LPAR RPAR • fBody

    LBRAC  shift, and go to state 8

    fBody  go to state 9


State 8

    4 fBody: LBRAC • statements return RBRAC

    ID      shift, and go to state 10
    VAR     shift, and go to state 11
    INCR    shift, and go to state 12
    DECR    shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16

    RETURN  [reduce using rule 6 (statements)]

    statements     go to state 17
    statement      go to state 18
    functionCall   go to state 19
    assignment     go to state 20
    unary          go to state 21
    inOrDecrement  go to state 22
    return         go to state 23
    if             go to state 24
    while          go to state 25


State 9

   54 main: FN MAIN LPAR RPAR fBody •

    $default  reduce using rule 54 (main)


State 10

   36 functionCall: ID • LPAR arguments RPAR
   43 assignment: ID • EQ expression SCOL
   44 unary: ID • inOrDecrement SCOL

    LPAR  shift, and go to state 26
    EQ    shift, and go to state 27
    INCR  shift, and go to state 12
    DECR  shift, and go to state 13

    inOrDecrement  go to state 28


State 11

    7 statement: VAR • declarations

    ID  shift, and go to state 29

    declarations  go to state 30
    declaration   go to state 31


State 12

   46 inOrDecrement: INCR •

    $default  reduce using rule 46 (inOrDecrement)


State 13

   47 inOrDecrement: DECR •

    $default  reduce using rule 47 (inOrDecrement)


State 14

   48 return: RETURN • expression SCOL

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 38
    functionCall  go to state 39
    literal       go to state 40


State 15

   49 if: IF • expression body else

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 41
    functionCall  go to state 39
    literal       go to state 40


State 16

   53 while: WHILE • expression body

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 42
    functionCall  go to state 39
    literal       go to state 40


State 17

    4 fBody: LBRAC statements • return RBRAC

    RETURN  shift, and go to state 14

    return  go to state 43


State 18

    5 statements: statement • statements

    ID      shift, and go to state 10
    VAR     shift, and go to state 11
    INCR    shift, and go to state 12
    DECR    shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16

    RETURN    [reduce using rule 6 (statements)]
    $default  reduce using rule 6 (statements)

    statements     go to state 44
    statement      go to state 18
    functionCall   go to state 19
    assignment     go to state 20
    unary          go to state 21
    inOrDecrement  go to state 22
    return         go to state 23
    if             go to state 24
    while          go to state 25


State 19

   11 statement: functionCall • SCOL

    SCOL  shift, and go to state 45


State 20

    8 statement: assignment •

    $default  reduce using rule 8 (statement)


State 21

    9 statement: unary •

    $default  reduce using rule 9 (statement)


State 22

   45 unary: inOrDecrement • ID SCOL

    ID  shift, and go to state 46


State 23

   10 statement: return •

    $default  reduce using rule 10 (statement)


State 24

   12 statement: if •

    $default  reduce using rule 12 (statement)


State 25

   13 statement: while •

    $default  reduce using rule 13 (statement)


State 26

   36 functionCall: ID LPAR • arguments RPAR

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    $default  reduce using rule 38 (arguments)

    expression    go to state 47
    functionCall  go to state 39
    arguments     go to state 48
    literal       go to state 40


State 27

   43 assignment: ID EQ • expression SCOL

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 49
    functionCall  go to state 39
    literal       go to state 40


State 28

   44 unary: ID inOrDecrement • SCOL

    SCOL  shift, and go to state 50


State 29

   16 declaration: ID • COL type EQ expression SCOL

    COL  shift, and go to state 51


State 30

    7 statement: VAR declarations •

    $default  reduce using rule 7 (statement)


State 31

   14 declarations: declaration • declarations
   15             | declaration •

    ID  shift, and go to state 29

    ID        [reduce using rule 15 (declarations)]
    $default  reduce using rule 15 (declarations)

    declarations  go to state 52
    declaration   go to state 31


State 32

   19 expression: ID •
   36 functionCall: ID • LPAR arguments RPAR

    LPAR  shift, and go to state 26

    $default  reduce using rule 19 (expression)


State 33

   41 literal: INT •

    $default  reduce using rule 41 (literal)


State 34

   42 literal: FLOAT •

    $default  reduce using rule 42 (literal)


State 35

   21 expression: LPAR • expression RPAR

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 53
    functionCall  go to state 39
    literal       go to state 40


State 36

   22 expression: MINUS • expression

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 54
    functionCall  go to state 39
    literal       go to state 40


State 37

   23 expression: EXCL • expression

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 55
    functionCall  go to state 39
    literal       go to state 40


State 38

   17 expression: expression • op expression
   48 return: RETURN expression • SCOL

    SCOL   shift, and go to state 56
    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    op  go to state 69


State 39

   18 expression: functionCall •

    $default  reduce using rule 18 (expression)


State 40

   20 expression: literal •

    $default  reduce using rule 20 (expression)


State 41

   17 expression: expression • op expression
   49 if: IF expression • body else

    LBRAC  shift, and go to state 70
    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    op    go to state 69
    body  go to state 71


State 42

   17 expression: expression • op expression
   53 while: WHILE expression • body

    LBRAC  shift, and go to state 70
    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    op    go to state 69
    body  go to state 72


State 43

    4 fBody: LBRAC statements return • RBRAC

    RBRAC  shift, and go to state 73


State 44

    5 statements: statement statements •

    $default  reduce using rule 5 (statements)


State 45

   11 statement: functionCall SCOL •

    $default  reduce using rule 11 (statement)


State 46

   45 unary: inOrDecrement ID • SCOL

    SCOL  shift, and go to state 74


State 47

   17 expression: expression • op expression
   37 arguments: expression • moreArgs

    COM    shift, and go to state 75
    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    $default  reduce using rule 40 (moreArgs)

    op        go to state 69
    moreArgs  go to state 76


State 48

   36 functionCall: ID LPAR arguments • RPAR

    RPAR  shift, and go to state 77


State 49

   17 expression: expression • op expression
   43 assignment: ID EQ expression • SCOL

    SCOL   shift, and go to state 78
    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    op  go to state 69


State 50

   44 unary: ID inOrDecrement SCOL •

    $default  reduce using rule 44 (unary)


State 51

   16 declaration: ID COL • type EQ expression SCOL

    TYPE_INT    shift, and go to state 79
    TYPE_FLOAT  shift, and go to state 80

    type  go to state 81


State 52

   14 declarations: declaration declarations •

    $default  reduce using rule 14 (declarations)


State 53

   17 expression: expression • op expression
   21           | LPAR expression • RPAR

    RPAR   shift, and go to state 82
    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    op  go to state 69


State 54

   17 expression: expression • op expression
   22           | MINUS expression •

    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    MINUS     [reduce using rule 22 (expression)]
    PLUS      [reduce using rule 22 (expression)]
    ASTR      [reduce using rule 22 (expression)]
    SLSH      [reduce using rule 22 (expression)]
    PRCT      [reduce using rule 22 (expression)]
    GT        [reduce using rule 22 (expression)]
    LT        [reduce using rule 22 (expression)]
    GEQ       [reduce using rule 22 (expression)]
    LEQ       [reduce using rule 22 (expression)]
    DIF       [reduce using rule 22 (expression)]
    AND       [reduce using rule 22 (expression)]
    OR        [reduce using rule 22 (expression)]
    $default  reduce using rule 22 (expression)

    op  go to state 69


State 55

   17 expression: expression • op expression
   23           | EXCL expression •

    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    MINUS     [reduce using rule 23 (expression)]
    PLUS      [reduce using rule 23 (expression)]
    ASTR      [reduce using rule 23 (expression)]
    SLSH      [reduce using rule 23 (expression)]
    PRCT      [reduce using rule 23 (expression)]
    GT        [reduce using rule 23 (expression)]
    LT        [reduce using rule 23 (expression)]
    GEQ       [reduce using rule 23 (expression)]
    LEQ       [reduce using rule 23 (expression)]
    DIF       [reduce using rule 23 (expression)]
    AND       [reduce using rule 23 (expression)]
    OR        [reduce using rule 23 (expression)]
    $default  reduce using rule 23 (expression)

    op  go to state 69


State 56

   48 return: RETURN expression SCOL •

    $default  reduce using rule 48 (return)


State 57

   25 op: MINUS •

    $default  reduce using rule 25 (op)


State 58

   24 op: PLUS •

    $default  reduce using rule 24 (op)


State 59

   26 op: ASTR •

    $default  reduce using rule 26 (op)


State 60

   27 op: SLSH •

    $default  reduce using rule 27 (op)


State 61

   28 op: PRCT •

    $default  reduce using rule 28 (op)


State 62

   29 op: GT •

    $default  reduce using rule 29 (op)


State 63

   30 op: LT •

    $default  reduce using rule 30 (op)


State 64

   31 op: GEQ •

    $default  reduce using rule 31 (op)


State 65

   32 op: LEQ •

    $default  reduce using rule 32 (op)


State 66

   33 op: DIF •

    $default  reduce using rule 33 (op)


State 67

   34 op: AND •

    $default  reduce using rule 34 (op)


State 68

   35 op: OR •

    $default  reduce using rule 35 (op)


State 69

   17 expression: expression op • expression

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 83
    functionCall  go to state 39
    literal       go to state 40


State 70

   50 body: LBRAC • statements RBRAC

    ID      shift, and go to state 10
    VAR     shift, and go to state 11
    INCR    shift, and go to state 12
    DECR    shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16

    $default  reduce using rule 6 (statements)

    statements     go to state 84
    statement      go to state 18
    functionCall   go to state 19
    assignment     go to state 20
    unary          go to state 21
    inOrDecrement  go to state 22
    return         go to state 23
    if             go to state 24
    while          go to state 25


State 71

   49 if: IF expression body • else

    ELSE  shift, and go to state 85

    $default  reduce using rule 52 (else)

    else  go to state 86


State 72

   53 while: WHILE expression body •

    $default  reduce using rule 53 (while)


State 73

    4 fBody: LBRAC statements return RBRAC •

    $default  reduce using rule 4 (fBody)


State 74

   45 unary: inOrDecrement ID SCOL •

    $default  reduce using rule 45 (unary)


State 75

   39 moreArgs: COM • expression moreArgs

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 87
    functionCall  go to state 39
    literal       go to state 40


State 76

   37 arguments: expression moreArgs •

    $default  reduce using rule 37 (arguments)


State 77

   36 functionCall: ID LPAR arguments RPAR •

    $default  reduce using rule 36 (functionCall)


State 78

   43 assignment: ID EQ expression SCOL •

    $default  reduce using rule 43 (assignment)


State 79

    2 type: TYPE_INT •

    $default  reduce using rule 2 (type)


State 80

    3 type: TYPE_FLOAT •

    $default  reduce using rule 3 (type)


State 81

   16 declaration: ID COL type • EQ expression SCOL

    EQ  shift, and go to state 88


State 82

   21 expression: LPAR expression RPAR •

    $default  reduce using rule 21 (expression)


State 83

   17 expression: expression • op expression
   17           | expression op expression •

    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    MINUS     [reduce using rule 17 (expression)]
    PLUS      [reduce using rule 17 (expression)]
    ASTR      [reduce using rule 17 (expression)]
    SLSH      [reduce using rule 17 (expression)]
    PRCT      [reduce using rule 17 (expression)]
    GT        [reduce using rule 17 (expression)]
    LT        [reduce using rule 17 (expression)]
    GEQ       [reduce using rule 17 (expression)]
    LEQ       [reduce using rule 17 (expression)]
    DIF       [reduce using rule 17 (expression)]
    AND       [reduce using rule 17 (expression)]
    OR        [reduce using rule 17 (expression)]
    $default  reduce using rule 17 (expression)

    op  go to state 69


State 84

   50 body: LBRAC statements • RBRAC

    RBRAC  shift, and go to state 89


State 85

   51 else: ELSE • body

    LBRAC  shift, and go to state 70

    body  go to state 90


State 86

   49 if: IF expression body else •

    $default  reduce using rule 49 (if)


State 87

   17 expression: expression • op expression
   39 moreArgs: COM expression • moreArgs

    COM    shift, and go to state 75
    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    $default  reduce using rule 40 (moreArgs)

    op        go to state 69
    moreArgs  go to state 91


State 88

   16 declaration: ID COL type EQ • expression SCOL

    ID     shift, and go to state 32
    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    LPAR   shift, and go to state 35
    MINUS  shift, and go to state 36
    EXCL   shift, and go to state 37

    expression    go to state 92
    functionCall  go to state 39
    literal       go to state 40


State 89

   50 body: LBRAC statements RBRAC •

    $default  reduce using rule 50 (body)


State 90

   51 else: ELSE body •

    $default  reduce using rule 51 (else)


State 91

   39 moreArgs: COM expression moreArgs •

    $default  reduce using rule 39 (moreArgs)


State 92

   16 declaration: ID COL type EQ expression • SCOL
   17 expression: expression • op expression

    SCOL   shift, and go to state 93
    MINUS  shift, and go to state 57
    PLUS   shift, and go to state 58
    ASTR   shift, and go to state 59
    SLSH   shift, and go to state 60
    PRCT   shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GEQ    shift, and go to state 64
    LEQ    shift, and go to state 65
    DIF    shift, and go to state 66
    AND    shift, and go to state 67
    OR     shift, and go to state 68

    op  go to state 69


State 93

   16 declaration: ID COL type EQ expression SCOL •

    $default  reduce using rule 16 (declaration)
